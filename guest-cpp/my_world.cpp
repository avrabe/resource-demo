// Generated by `wit-bindgen` 0.1.0. DO NOT EDIT!
#include "my_world_cpp.h"
#include <utility>

__attribute__((__weak__, __export_name__("cabi_realloc")))
void *cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size) {
  (void) old_size;
  if (new_size == 0) return (void*) align;
  void *ret = realloc(ptr, new_size);
  if (!ret) abort();
  return ret;
}

namespace test {
  namespace example {
    
    namespace my_interface {
      MyObject::~MyObject() {
        extern __attribute__((import_module("test:example/my-interface")))
        __attribute__((import_name("[resource-drop]my-object")))
        void test_example_my_interface__resource_drop_my_object(int32_t);
        
        test_example_my_interface__resource_drop_my_object(handle);
      }
      
      MyObject::MyObject(my_world::ResourceBase&& handle) : my_world::ResourceBase(std::move(handle)) {}
      MyObject::MyObject(uint32_t a){
        extern __attribute__((import_module("test:example/my-interface")))
        __attribute__((import_name("[constructor]my-object")))
        int32_t test_example_my_interface__constructor_my_object(int32_t);
        auto ret = test_example_my_interface__constructor_my_object((int32_t)(a));
        this->handle = ret;
//        *this = MyObject{std::move(my_world::ResourceBase(ret))};
      }
      void MyObject::Set(uint32_t v){
        extern __attribute__((import_module("test:example/my-interface")))
        __attribute__((import_name("[method]my-object.set")))
        void test_example_my_interface__method_my_object_set(int32_t, int32_t);
        test_example_my_interface__method_my_object_set(this->handle, (int32_t)(v));
      }
      uint32_t MyObject::Get(){
        extern __attribute__((import_module("test:example/my-interface")))
        __attribute__((import_name("[method]my-object.get")))
        int32_t test_example_my_interface__method_my_object_get(int32_t);
        auto ret = test_example_my_interface__method_my_object_get(this->handle);
        return (uint32_t)(ret);
      }
    }
    
    
  }
}
